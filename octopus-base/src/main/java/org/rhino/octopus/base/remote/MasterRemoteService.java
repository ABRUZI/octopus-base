/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.rhino.octopus.base.remote;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "restriction" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-1")
public class MasterRemoteService {

	public interface Iface {

		public void registFlow(String flowId, String cronExpr)
				throws org.apache.thrift.TException;

		public void unregistFlow(String flowId)
				throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void registFlow(String flowId, String cronExpr,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void unregistFlow(String flowId,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient
			implements Iface {
		public static class Factory implements
				org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot,
				org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public void registFlow(String flowId, String cronExpr)
				throws org.apache.thrift.TException {
			send_registFlow(flowId, cronExpr);
			recv_registFlow();
		}

		public void send_registFlow(String flowId, String cronExpr)
				throws org.apache.thrift.TException {
			registFlow_args args = new registFlow_args();
			args.setFlowId(flowId);
			args.setCronExpr(cronExpr);
			sendBase("registFlow", args);
		}

		public void recv_registFlow() throws org.apache.thrift.TException {
			registFlow_result result = new registFlow_result();
			receiveBase(result, "registFlow");
			return;
		}

		public void unregistFlow(String flowId)
				throws org.apache.thrift.TException {
			send_unregistFlow(flowId);
			recv_unregistFlow();
		}

		public void send_unregistFlow(String flowId)
				throws org.apache.thrift.TException {
			unregistFlow_args args = new unregistFlow_args();
			args.setFlowId(flowId);
			sendBase("unregistFlow", args);
		}

		public void recv_unregistFlow() throws org.apache.thrift.TException {
			unregistFlow_result result = new unregistFlow_result();
			receiveBase(result, "unregistFlow");
			return;
		}

	}

	public static class AsyncClient extends
			org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements
				org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(
					org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(
					org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager,
						transport);
			}
		}

		public AsyncClient(
				org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void registFlow(String flowId, String cronExpr,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			registFlow_call method_call = new registFlow_call(flowId, cronExpr,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class registFlow_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private String flowId;
			private String cronExpr;

			public registFlow_call(
					String flowId,
					String cronExpr,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.flowId = flowId;
				this.cronExpr = cronExpr;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"registFlow",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				registFlow_args args = new registFlow_args();
				args.setFlowId(flowId);
				args.setCronExpr(cronExpr);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public void getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				(new Client(prot)).recv_registFlow();
			}
		}

		public void unregistFlow(String flowId,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			unregistFlow_call method_call = new unregistFlow_call(flowId,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class unregistFlow_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private String flowId;

			public unregistFlow_call(
					String flowId,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.flowId = flowId;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"unregistFlow",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				unregistFlow_args args = new unregistFlow_args();
				args.setFlowId(flowId);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public void getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				(new Client(prot)).recv_unregistFlow();
			}
		}

	}

	@SuppressWarnings("unused")
	public static class Processor<I extends Iface> extends
			org.apache.thrift.TBaseProcessor<I> implements
			org.apache.thrift.TProcessor {
		private static final Logger LOGGER = LoggerFactory
				.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(
					iface,
					getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(
				I iface,
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("registFlow", new registFlow());
			processMap.put("unregistFlow", new unregistFlow());
			return processMap;
		}

		public static class registFlow<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, registFlow_args> {
			public registFlow() {
				super("registFlow");
			}

			public registFlow_args getEmptyArgsInstance() {
				return new registFlow_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public registFlow_result getResult(I iface, registFlow_args args)
					throws org.apache.thrift.TException {
				registFlow_result result = new registFlow_result();
				iface.registFlow(args.flowId, args.cronExpr);
				return result;
			}
		}

		public static class unregistFlow<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, unregistFlow_args> {
			public unregistFlow() {
				super("unregistFlow");
			}

			public unregistFlow_args getEmptyArgsInstance() {
				return new unregistFlow_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public unregistFlow_result getResult(I iface, unregistFlow_args args)
					throws org.apache.thrift.TException {
				unregistFlow_result result = new unregistFlow_result();
				iface.unregistFlow(args.flowId);
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends
			org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final Logger LOGGER = LoggerFactory
				.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(
					iface,
					getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(
				I iface,
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("registFlow", new registFlow());
			processMap.put("unregistFlow", new unregistFlow());
			return processMap;
		}

		public static class registFlow<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, registFlow_args, Void> {
			public registFlow() {
				super("registFlow");
			}

			public registFlow_args getEmptyArgsInstance() {
				return new registFlow_args();
			}

			public AsyncMethodCallback<Void> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Void>() {
					public void onComplete(Void o) {
						registFlow_result result = new registFlow_result();
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					@SuppressWarnings("unused")
					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						registFlow_result result = new registFlow_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					registFlow_args args,
					org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
					throws TException {
				iface.registFlow(args.flowId, args.cronExpr, resultHandler);
			}
		}

		public static class unregistFlow<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, unregistFlow_args, Void> {
			public unregistFlow() {
				super("unregistFlow");
			}

			public unregistFlow_args getEmptyArgsInstance() {
				return new unregistFlow_args();
			}

			public AsyncMethodCallback<Void> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Void>() {
					public void onComplete(Void o) {
						unregistFlow_result result = new unregistFlow_result();
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					@SuppressWarnings("unused")
					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						unregistFlow_result result = new unregistFlow_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					unregistFlow_args args,
					org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
					throws TException {
				iface.unregistFlow(args.flowId, resultHandler);
			}
		}

	}

	public static class registFlow_args implements
			org.apache.thrift.TBase<registFlow_args, registFlow_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<registFlow_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"registFlow_args");

		private static final org.apache.thrift.protocol.TField FLOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"flowId", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField CRON_EXPR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"cronExpr", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new registFlow_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new registFlow_argsTupleSchemeFactory());
		}

		public String flowId; // required
		public String cronExpr; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			FLOW_ID((short) 1, "flowId"), CRON_EXPR((short) 2, "cronExpr");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FLOW_ID
					return FLOW_ID;
				case 2: // CRON_EXPR
					return CRON_EXPR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FLOW_ID,
					new org.apache.thrift.meta_data.FieldMetaData("flowId",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CRON_EXPR,
					new org.apache.thrift.meta_data.FieldMetaData("cronExpr",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					registFlow_args.class, metaDataMap);
		}

		public registFlow_args() {
		}

		public registFlow_args(String flowId, String cronExpr) {
			this();
			this.flowId = flowId;
			this.cronExpr = cronExpr;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public registFlow_args(registFlow_args other) {
			if (other.isSetFlowId()) {
				this.flowId = other.flowId;
			}
			if (other.isSetCronExpr()) {
				this.cronExpr = other.cronExpr;
			}
		}

		public registFlow_args deepCopy() {
			return new registFlow_args(this);
		}

		@Override
		public void clear() {
			this.flowId = null;
			this.cronExpr = null;
		}

		public String getFlowId() {
			return this.flowId;
		}

		public registFlow_args setFlowId(String flowId) {
			this.flowId = flowId;
			return this;
		}

		public void unsetFlowId() {
			this.flowId = null;
		}

		/**
		 * Returns true if field flowId is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetFlowId() {
			return this.flowId != null;
		}

		public void setFlowIdIsSet(boolean value) {
			if (!value) {
				this.flowId = null;
			}
		}

		public String getCronExpr() {
			return this.cronExpr;
		}

		public registFlow_args setCronExpr(String cronExpr) {
			this.cronExpr = cronExpr;
			return this;
		}

		public void unsetCronExpr() {
			this.cronExpr = null;
		}

		/**
		 * Returns true if field cronExpr is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetCronExpr() {
			return this.cronExpr != null;
		}

		public void setCronExprIsSet(boolean value) {
			if (!value) {
				this.cronExpr = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case FLOW_ID:
				if (value == null) {
					unsetFlowId();
				} else {
					setFlowId((String) value);
				}
				break;

			case CRON_EXPR:
				if (value == null) {
					unsetCronExpr();
				} else {
					setCronExpr((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case FLOW_ID:
				return getFlowId();

			case CRON_EXPR:
				return getCronExpr();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case FLOW_ID:
				return isSetFlowId();
			case CRON_EXPR:
				return isSetCronExpr();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof registFlow_args)
				return this.equals((registFlow_args) that);
			return false;
		}

		public boolean equals(registFlow_args that) {
			if (that == null)
				return false;

			boolean this_present_flowId = true && this.isSetFlowId();
			boolean that_present_flowId = true && that.isSetFlowId();
			if (this_present_flowId || that_present_flowId) {
				if (!(this_present_flowId && that_present_flowId))
					return false;
				if (!this.flowId.equals(that.flowId))
					return false;
			}

			boolean this_present_cronExpr = true && this.isSetCronExpr();
			boolean that_present_cronExpr = true && that.isSetCronExpr();
			if (this_present_cronExpr || that_present_cronExpr) {
				if (!(this_present_cronExpr && that_present_cronExpr))
					return false;
				if (!this.cronExpr.equals(that.cronExpr))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_flowId = true && (isSetFlowId());
			list.add(present_flowId);
			if (present_flowId)
				list.add(flowId);

			boolean present_cronExpr = true && (isSetCronExpr());
			list.add(present_cronExpr);
			if (present_cronExpr)
				list.add(cronExpr);

			return list.hashCode();
		}

		@Override
		public int compareTo(registFlow_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetFlowId()).compareTo(
					other.isSetFlowId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetFlowId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.flowId, other.flowId);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetCronExpr()).compareTo(
					other.isSetCronExpr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCronExpr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.cronExpr, other.cronExpr);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("registFlow_args(");
			boolean first = true;

			sb.append("flowId:");
			if (this.flowId == null) {
				sb.append("null");
			} else {
				sb.append(this.flowId);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("cronExpr:");
			if (this.cronExpr == null) {
				sb.append("null");
			} else {
				sb.append(this.cronExpr);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class registFlow_argsStandardSchemeFactory implements
				SchemeFactory {
			public registFlow_argsStandardScheme getScheme() {
				return new registFlow_argsStandardScheme();
			}
		}

		private static class registFlow_argsStandardScheme extends
				StandardScheme<registFlow_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					registFlow_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FLOW_ID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.flowId = iprot.readString();
							struct.setFlowIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // CRON_EXPR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.cronExpr = iprot.readString();
							struct.setCronExprIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					registFlow_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.flowId != null) {
					oprot.writeFieldBegin(FLOW_ID_FIELD_DESC);
					oprot.writeString(struct.flowId);
					oprot.writeFieldEnd();
				}
				if (struct.cronExpr != null) {
					oprot.writeFieldBegin(CRON_EXPR_FIELD_DESC);
					oprot.writeString(struct.cronExpr);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class registFlow_argsTupleSchemeFactory implements
				SchemeFactory {
			public registFlow_argsTupleScheme getScheme() {
				return new registFlow_argsTupleScheme();
			}
		}

		private static class registFlow_argsTupleScheme extends
				TupleScheme<registFlow_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					registFlow_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetFlowId()) {
					optionals.set(0);
				}
				if (struct.isSetCronExpr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetFlowId()) {
					oprot.writeString(struct.flowId);
				}
				if (struct.isSetCronExpr()) {
					oprot.writeString(struct.cronExpr);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					registFlow_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.flowId = iprot.readString();
					struct.setFlowIdIsSet(true);
				}
				if (incoming.get(1)) {
					struct.cronExpr = iprot.readString();
					struct.setCronExprIsSet(true);
				}
			}
		}

	}

	public static class registFlow_result
			implements
			org.apache.thrift.TBase<registFlow_result, registFlow_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<registFlow_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"registFlow_result");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new registFlow_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new registFlow_resultTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					registFlow_result.class, metaDataMap);
		}

		public registFlow_result() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public registFlow_result(registFlow_result other) {
		}

		public registFlow_result deepCopy() {
			return new registFlow_result(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof registFlow_result)
				return this.equals((registFlow_result) that);
			return false;
		}

		public boolean equals(registFlow_result that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@SuppressWarnings("unused")
		@Override
		public int compareTo(registFlow_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@SuppressWarnings("unused")
		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("registFlow_result(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class registFlow_resultStandardSchemeFactory implements
				SchemeFactory {
			public registFlow_resultStandardScheme getScheme() {
				return new registFlow_resultStandardScheme();
			}
		}

		private static class registFlow_resultStandardScheme extends
				StandardScheme<registFlow_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					registFlow_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					registFlow_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class registFlow_resultTupleSchemeFactory implements
				SchemeFactory {
			public registFlow_resultTupleScheme getScheme() {
				return new registFlow_resultTupleScheme();
			}
		}

		private static class registFlow_resultTupleScheme extends
				TupleScheme<registFlow_result> {

			@SuppressWarnings("unused")
			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					registFlow_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@SuppressWarnings("unused")
			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					registFlow_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class unregistFlow_args
			implements
			org.apache.thrift.TBase<unregistFlow_args, unregistFlow_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<unregistFlow_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"unregistFlow_args");

		private static final org.apache.thrift.protocol.TField FLOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"flowId", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new unregistFlow_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new unregistFlow_argsTupleSchemeFactory());
		}

		public String flowId; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			FLOW_ID((short) 1, "flowId");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FLOW_ID
					return FLOW_ID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FLOW_ID,
					new org.apache.thrift.meta_data.FieldMetaData("flowId",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					unregistFlow_args.class, metaDataMap);
		}

		public unregistFlow_args() {
		}

		public unregistFlow_args(String flowId) {
			this();
			this.flowId = flowId;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public unregistFlow_args(unregistFlow_args other) {
			if (other.isSetFlowId()) {
				this.flowId = other.flowId;
			}
		}

		public unregistFlow_args deepCopy() {
			return new unregistFlow_args(this);
		}

		@Override
		public void clear() {
			this.flowId = null;
		}

		public String getFlowId() {
			return this.flowId;
		}

		public unregistFlow_args setFlowId(String flowId) {
			this.flowId = flowId;
			return this;
		}

		public void unsetFlowId() {
			this.flowId = null;
		}

		/**
		 * Returns true if field flowId is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetFlowId() {
			return this.flowId != null;
		}

		public void setFlowIdIsSet(boolean value) {
			if (!value) {
				this.flowId = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case FLOW_ID:
				if (value == null) {
					unsetFlowId();
				} else {
					setFlowId((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case FLOW_ID:
				return getFlowId();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case FLOW_ID:
				return isSetFlowId();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof unregistFlow_args)
				return this.equals((unregistFlow_args) that);
			return false;
		}

		public boolean equals(unregistFlow_args that) {
			if (that == null)
				return false;

			boolean this_present_flowId = true && this.isSetFlowId();
			boolean that_present_flowId = true && that.isSetFlowId();
			if (this_present_flowId || that_present_flowId) {
				if (!(this_present_flowId && that_present_flowId))
					return false;
				if (!this.flowId.equals(that.flowId))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_flowId = true && (isSetFlowId());
			list.add(present_flowId);
			if (present_flowId)
				list.add(flowId);

			return list.hashCode();
		}

		@Override
		public int compareTo(unregistFlow_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetFlowId()).compareTo(
					other.isSetFlowId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetFlowId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.flowId, other.flowId);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@SuppressWarnings("unused")
		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("unregistFlow_args(");
			boolean first = true;

			sb.append("flowId:");
			if (this.flowId == null) {
				sb.append("null");
			} else {
				sb.append(this.flowId);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class unregistFlow_argsStandardSchemeFactory implements
				SchemeFactory {
			public unregistFlow_argsStandardScheme getScheme() {
				return new unregistFlow_argsStandardScheme();
			}
		}

		private static class unregistFlow_argsStandardScheme extends
				StandardScheme<unregistFlow_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					unregistFlow_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FLOW_ID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.flowId = iprot.readString();
							struct.setFlowIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					unregistFlow_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.flowId != null) {
					oprot.writeFieldBegin(FLOW_ID_FIELD_DESC);
					oprot.writeString(struct.flowId);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class unregistFlow_argsTupleSchemeFactory implements
				SchemeFactory {
			public unregistFlow_argsTupleScheme getScheme() {
				return new unregistFlow_argsTupleScheme();
			}
		}

		private static class unregistFlow_argsTupleScheme extends
				TupleScheme<unregistFlow_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					unregistFlow_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetFlowId()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetFlowId()) {
					oprot.writeString(struct.flowId);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					unregistFlow_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.flowId = iprot.readString();
					struct.setFlowIdIsSet(true);
				}
			}
		}

	}

	public static class unregistFlow_result
			implements
			org.apache.thrift.TBase<unregistFlow_result, unregistFlow_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<unregistFlow_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"unregistFlow_result");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new unregistFlow_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new unregistFlow_resultTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					unregistFlow_result.class, metaDataMap);
		}

		public unregistFlow_result() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public unregistFlow_result(unregistFlow_result other) {
		}

		public unregistFlow_result deepCopy() {
			return new unregistFlow_result(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof unregistFlow_result)
				return this.equals((unregistFlow_result) that);
			return false;
		}

		public boolean equals(unregistFlow_result that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@SuppressWarnings("unused")
		@Override
		public int compareTo(unregistFlow_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@SuppressWarnings("unused")
		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("unregistFlow_result(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class unregistFlow_resultStandardSchemeFactory implements
				SchemeFactory {
			public unregistFlow_resultStandardScheme getScheme() {
				return new unregistFlow_resultStandardScheme();
			}
		}

		private static class unregistFlow_resultStandardScheme extends
				StandardScheme<unregistFlow_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					unregistFlow_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					unregistFlow_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class unregistFlow_resultTupleSchemeFactory implements
				SchemeFactory {
			public unregistFlow_resultTupleScheme getScheme() {
				return new unregistFlow_resultTupleScheme();
			}
		}

		@SuppressWarnings("unused")
		private static class unregistFlow_resultTupleScheme extends
				TupleScheme<unregistFlow_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					unregistFlow_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					unregistFlow_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

}
